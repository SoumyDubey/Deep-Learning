{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2021-02-21T05:19:42.293797Z",
     "iopub.status.busy": "2021-02-21T05:19:42.292921Z",
     "iopub.status.idle": "2021-02-21T05:19:42.296700Z",
     "shell.execute_reply": "2021-02-21T05:19:42.296057Z"
    },
    "papermill": {
     "duration": 0.018823,
     "end_time": "2021-02-21T05:19:42.296909",
     "exception": false,
     "start_time": "2021-02-21T05:19:42.278086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-21T05:19:42.315725Z",
     "iopub.status.busy": "2021-02-21T05:19:42.314879Z",
     "iopub.status.idle": "2021-02-21T05:19:48.726942Z",
     "shell.execute_reply": "2021-02-21T05:19:48.726380Z"
    },
    "papermill": {
     "duration": 6.422411,
     "end_time": "2021-02-21T05:19:48.727094",
     "exception": false,
     "start_time": "2021-02-21T05:19:42.304683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-21T05:19:48.745446Z",
     "iopub.status.busy": "2021-02-21T05:19:48.744678Z",
     "iopub.status.idle": "2021-02-21T05:19:48.753800Z",
     "shell.execute_reply": "2021-02-21T05:19:48.754412Z"
    },
    "papermill": {
     "duration": 0.019968,
     "end_time": "2021-02-21T05:19:48.754593",
     "exception": false,
     "start_time": "2021-02-21T05:19:48.734625",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-40.0 degree Celsius = -40.0 degree Fahrenhet\n",
      "-10.0 degree Celsius = 14.0 degree Fahrenhet\n",
      "0.0 degree Celsius = 32.0 degree Fahrenhet\n",
      "8.0 degree Celsius = 46.0 degree Fahrenhet\n",
      "15.0 degree Celsius = 59.0 degree Fahrenhet\n",
      "22.0 degree Celsius = 72.0 degree Fahrenhet\n",
      "38.0 degree Celsius = 100.0 degree Fahrenhet\n"
     ]
    }
   ],
   "source": [
    "celsius_q = np.array([-40,-10,0,8,15,22,38], dtype = float)\n",
    "fahrenheit_a = np.array([-40,14,32,46,59,72,100], dtype = float)\n",
    "\n",
    "for i, c in enumerate(celsius_q):\n",
    "    print('{} degree Celsius = {} degree Fahrenhet'.format(c, fahrenheit_a[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-21T05:19:48.776538Z",
     "iopub.status.busy": "2021-02-21T05:19:48.775577Z",
     "iopub.status.idle": "2021-02-21T05:19:48.855922Z",
     "shell.execute_reply": "2021-02-21T05:19:48.855246Z"
    },
    "papermill": {
     "duration": 0.093086,
     "end_time": "2021-02-21T05:19:48.856064",
     "exception": false,
     "start_time": "2021-02-21T05:19:48.762978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating Model\n",
    "\n",
    "model = tf.keras.Sequential([\n",
    "    tf.keras.layers.Dense(units =1 , input_shape = [1])\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-21T05:19:48.875751Z",
     "iopub.status.busy": "2021-02-21T05:19:48.874849Z",
     "iopub.status.idle": "2021-02-21T05:19:48.892132Z",
     "shell.execute_reply": "2021-02-21T05:19:48.891438Z"
    },
    "papermill": {
     "duration": 0.028142,
     "end_time": "2021-02-21T05:19:48.892276",
     "exception": false,
     "start_time": "2021-02-21T05:19:48.864134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Complie the Model with loss and optimizer function\n",
    "\n",
    "model.compile(loss = 'mean_squared_error',\n",
    "             optimizer = tf.keras.optimizers.Adam(0.1)) # 0.1 = learning rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-21T05:19:48.914018Z",
     "iopub.status.busy": "2021-02-21T05:19:48.913357Z",
     "iopub.status.idle": "2021-02-21T05:19:50.056623Z",
     "shell.execute_reply": "2021-02-21T05:19:50.057169Z"
    },
    "papermill": {
     "duration": 1.156882,
     "end_time": "2021-02-21T05:19:50.057364",
     "exception": false,
     "start_time": "2021-02-21T05:19:48.900482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished Training the model\n"
     ]
    }
   ],
   "source": [
    "# Train Model\n",
    "\n",
    "history = model.fit(celsius_q, fahrenheit_a, epochs = 500, verbose = False)\n",
    "print('Finished Training the model')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-21T05:19:50.098983Z",
     "iopub.status.busy": "2021-02-21T05:19:50.095167Z",
     "iopub.status.idle": "2021-02-21T05:19:50.261954Z",
     "shell.execute_reply": "2021-02-21T05:19:50.260802Z"
    },
    "papermill": {
     "duration": 0.194918,
     "end_time": "2021-02-21T05:19:50.262141",
     "exception": false,
     "start_time": "2021-02-21T05:19:50.067223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f27f0ccab10>]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display trainig Statistics\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "plt.xlabel('Epoch Number')\n",
    "plt.ylabel('Loss Magnitude')\n",
    "plt.plot(history.history['loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-21T05:19:50.288174Z",
     "iopub.status.busy": "2021-02-21T05:19:50.286955Z",
     "iopub.status.idle": "2021-02-21T05:19:50.403834Z",
     "shell.execute_reply": "2021-02-21T05:19:50.402917Z"
    },
    "papermill": {
     "duration": 0.131546,
     "end_time": "2021-02-21T05:19:50.404039",
     "exception": false,
     "start_time": "2021-02-21T05:19:50.272493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[211.30861]]\n"
     ]
    }
   ],
   "source": [
    "# Model to Predict Values\n",
    "\n",
    "print(model.predict([100.0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-21T05:19:50.434853Z",
     "iopub.status.busy": "2021-02-21T05:19:50.432918Z",
     "iopub.status.idle": "2021-02-21T05:19:50.437447Z",
     "shell.execute_reply": "2021-02-21T05:19:50.436860Z"
    },
    "papermill": {
     "duration": 0.022294,
     "end_time": "2021-02-21T05:19:50.437594",
     "exception": false,
     "start_time": "2021-02-21T05:19:50.415300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "These are the Layers Variables: [array([[1.8245076]], dtype=float32), array([28.857855], dtype=float32)]\n"
     ]
    }
   ],
   "source": [
    "# Looking at the Layers Weights\n",
    "\n",
    "print('These are the Layers Variables: {}'.format(model.get_weights()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.011209,
     "end_time": "2021-02-21T05:19:50.459542",
     "exception": false,
     "start_time": "2021-02-21T05:19:50.448333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.290183,
   "end_time": "2021-02-21T05:19:51.481589",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-02-21T05:19:36.191406",
   "version": "2.2.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
